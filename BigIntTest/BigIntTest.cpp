#include <cmath>
#include <stdexcept>
#include <utility>
#include <gtest/gtest.h>
#include "BigInt.h"

TEST(BigIntDefaultCtor, IsZero)
{
    EXPECT_TRUE(BigInt() == BigInt(0));
    EXPECT_TRUE(BigInt() == BigInt(-5) + BigInt(5));
    EXPECT_TRUE(BigInt() == BigInt::fromString("0"));
}

TEST(BigIntIntCtor, HandlesNegativeNumbers)
{
    EXPECT_TRUE(BigInt(-1'423'786'792) == BigInt(-1'423'786'834) + BigInt(42));
    EXPECT_TRUE(BigInt(-42) == BigInt(42) - BigInt(84));
    EXPECT_TRUE(BigInt(static_cast<int64_t>(0x8000'0000'0000'0000)) == BigInt::fromString("-9223372036854775808"));
}

TEST(BigIntIntCtor, HandlesLargeNumbers)
{
    EXPECT_TRUE(BigInt(930'350'724'101'083'004) == BigInt(930'350'724) * BigInt(1'000'000'000) + BigInt(101'083'004));
}

TEST(BigIntDoubleCtor, Works)
{
    EXPECT_TRUE(BigInt(0.0) == BigInt(0));
    // double is truncated
    EXPECT_TRUE(BigInt(0.123) == BigInt(0));
    EXPECT_TRUE(BigInt(42.987) == BigInt(42));
    EXPECT_TRUE(BigInt(-100.5) == BigInt(-100));
    // documenting that inf results in zero
    EXPECT_TRUE(BigInt(std::pow(10, 500)) == BigInt(0));
    // big numbers
    EXPECT_TRUE(BigInt(std::pow(10, 300)) == BigInt::fromHex("0x17e43c8800759c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
}

TEST(BigIntAddOps, AddAssignWorks)
{
    BigInt acc, other;
    // if using the same object for the two arguments the rhs gets copy constructed as a temporary
    acc = BigInt::fromString("75755724578284142547987951683356371041");
    acc += acc;
    EXPECT_TRUE(acc == BigInt::fromString("151511449156568285095975903366712742082"));
    // lvalue
    // same sign calls add internally
    acc = BigInt::fromString("140619117438506315494035398259446408496");
    other = BigInt::fromString("259172282579644416949963027054289641912");
    acc += other;
    EXPECT_TRUE(acc == BigInt::fromString("399791400018150732443998425313736050408"));
    acc = BigInt::fromString("-1232262596054823645869958643897982632");
    other = BigInt::fromString("-107143589091372549765937715031518763382");
    acc += other;
    EXPECT_TRUE(acc == BigInt::fromString("-108375851687427373411807673675416746014"));
    // different sign calls sub internally
    acc = BigInt::fromString("116017366345566086791589044562794021527");
    other = BigInt::fromString("-92042184929288455276556060104844442566");
    acc += other;
    EXPECT_TRUE(acc == BigInt::fromString("23975181416277631515032984457949578961"));
    acc = BigInt::fromString("-252098597943277374584726519187118415728");
    other = BigInt::fromString("172736510626362207838688360318320141653");
    acc += other;
    EXPECT_TRUE(acc == BigInt::fromString("-79362087316915166746038158868798274075"));
    // sub creates a sign flip
    acc = BigInt::fromString("88988704692707580262264929955075395124");
    other = BigInt::fromString("-323871828589488281409789425578885606702");
    acc += other;
    EXPECT_TRUE(acc == BigInt::fromString("-234883123896780701147524495623810211578"));
    acc = BigInt::fromString("-31681913281973493829886095258832450487");
    other = BigInt::fromString("90888166960645771568930421863220800488");
    acc += other;
    EXPECT_TRUE(acc == BigInt::fromString("59206253678672277739044326604388350001"));
    // sign flip doesn't have borrow issues
    acc = BigInt::fromHex("0x0");
    other = BigInt::fromHex("-0xffffffff");
    acc += other;
    EXPECT_TRUE(acc == BigInt::fromHex("-0xffffffff"));
    // large lhs calls subFast
    acc = BigInt::fromString("4539902959033946648632001589105638258354937024945325294721");
    other = BigInt::fromString("-59202723362220991985360497641878709967");
    acc += other;
    EXPECT_TRUE(acc == BigInt::fromString("4539902959033946648572798865743417266369576527303446584754"));
    acc = BigInt::fromString("-3607010783138976833865131730937261778539608380545227158417");
    other = BigInt::fromString("124571828580374221237630921383452283324");
    acc += other;
    EXPECT_TRUE(acc == BigInt::fromString("-3607010783138976833740559902356887557301977459161774875093"));
    // subFast can't sign flip
    acc = BigInt::fromHex("0x100000000");
    other = BigInt::fromHex("-0xffffffff");
    acc += other;
    EXPECT_TRUE(acc == BigInt::fromHex("0x1"));
    // rvalue
    // same size
    acc = BigInt::fromString("20095871689005865792095735785102784882");
    acc.chunks.shrink_to_fit();
    other = BigInt::fromString("324958604367003581075647744514918515598");
    other.chunks.shrink_to_fit();
    acc += std::move(other);
    EXPECT_TRUE(acc == BigInt::fromString("345054476056009446867743480300021300480"));
    // lhs bigger
    acc = BigInt::fromString("2960181216150562856999670181757869299655431459437067631558");
    acc += BigInt::fromString("274534178608784630932599801390471882215");
    EXPECT_TRUE(acc == BigInt::fromString("2960181216150562857274204360366653930588031260827539513773"));
    // rhs bigger
    acc = BigInt::fromString("210952452658180486306554001785967005345");
    acc += BigInt::fromString("2102486884171322323952556293040809468758452510956749524524");
    EXPECT_TRUE(acc == BigInt::fromString("2102486884171322324163508745698989955065006512742716529869"));
}

TEST(BigIntAddOps, InfixAddWorks)
{
    BigInt lhs, rhs;
    // left bigger than right
    lhs = BigInt(8761890128033252764);
    rhs = BigInt(649602511);
    EXPECT_TRUE(lhs + rhs == BigInt(8761890128682855275));
    // right bigger than left
    lhs = BigInt(2811295173);
    rhs = BigInt(754751497079698868);
    EXPECT_TRUE(lhs + rhs == BigInt(754751499890994041));
    // right moved
    lhs = BigInt(4402506586766798590);
    EXPECT_TRUE(lhs + BigInt(1150734779629110894) == BigInt(5553241366395909484));
    // left moved
    rhs = BigInt(4398547354252609520);
    EXPECT_TRUE(BigInt(4140871994740157499) + rhs == BigInt(8539419348992767019));
    // both moved left bigger
    EXPECT_TRUE(BigInt(8669068799261902808) + BigInt(2084842186) == BigInt(8669068801346744994));
    // both moved right bigger
    EXPECT_TRUE(BigInt(1864966085) + BigInt::fromString("37890852236551425967882195292755940020") == BigInt::fromString("37890852236551425967882195294620906105"));
}

TEST(BigIntAddOps, IncWorks)
{
    // sign flip
    BigInt big;
    big = BigInt(-1);
    EXPECT_TRUE(++big == BigInt(0));
    EXPECT_TRUE(big == BigInt(0));
    big = BigInt(-1);
    EXPECT_TRUE(big++ == BigInt(-1));
    EXPECT_TRUE(big == BigInt(0));
    // pos
    big = BigInt::fromString("99985315366833321714781142766284374514");
    EXPECT_TRUE(++big == BigInt::fromString("99985315366833321714781142766284374515"));
    EXPECT_TRUE(big == BigInt::fromString("99985315366833321714781142766284374515"));
    big = BigInt::fromString("260753303325700864907984550614316009524");
    EXPECT_TRUE(big++ == BigInt::fromString("260753303325700864907984550614316009524"));
    EXPECT_TRUE(big == BigInt::fromString("260753303325700864907984550614316009525"));
    // neg
    big = BigInt::fromString("-202158263090152112158386684678448718644");
    EXPECT_TRUE(++big == BigInt::fromString("-202158263090152112158386684678448718643"));
    EXPECT_TRUE(big == BigInt::fromString("-202158263090152112158386684678448718643"));
    big = BigInt::fromString("-335614232706137167485301907811023029400");
    EXPECT_TRUE(big++ == BigInt::fromString("-335614232706137167485301907811023029400"));
    EXPECT_TRUE(big == BigInt::fromString("-335614232706137167485301907811023029399"));
}

TEST(BigIntSubOps, SubAssignWorks)
{
    BigInt acc, other;
    // if using the same object for the two arguments set this to 0
    acc = BigInt::fromString("299991879175065554003165711935664360149");
    acc -= acc;
    EXPECT_TRUE(acc == BigInt(0));
    // lvalue
    // different sign calls add internally
    acc = BigInt::fromString("290517866204364667103023331584081551549");
    other = BigInt::fromString("-208775072726821523233506023523759756381");
    acc -= other;
    EXPECT_TRUE(acc == BigInt::fromString("499292938931186190336529355107841307930"));
    acc = BigInt::fromString("-54218754794894332581111291671350393256");
    other = BigInt::fromString("271906420937895232866550170470935814313");
    acc -= other;
    EXPECT_TRUE(acc == BigInt::fromString("-326125175732789565447661462142286207569"));
    // same sign calls sub internally
    acc = BigInt::fromString("80687557361262891311703229920389377019");
    other = BigInt::fromString("40305504005676892185873247278694961784");
    acc -= other;
    EXPECT_TRUE(acc == BigInt::fromString("40382053355585999125829982641694415235"));
    acc = BigInt::fromString("-233810231047446304405361754765671248986");
    other = BigInt::fromString("-209617967911808967380236602234692327471");
    acc -= other;
    EXPECT_TRUE(acc == BigInt::fromString("-24192263135637337025125152530978921515"));
    // sub creates a sign flip
    acc = BigInt::fromString("244223031617335672087737596121310172590");
    other = BigInt::fromString("297437825308561451148322748928483532442");
    acc -= other;
    EXPECT_TRUE(acc == BigInt::fromString("-53214793691225779060585152807173359852"));
    acc = BigInt::fromString("-124368660417730718542158443479849451465");
    other = BigInt::fromString("-316837596039209314661106052399312136124");
    acc -= other;
    EXPECT_TRUE(acc == BigInt::fromString("192468935621478596118947608919462684659"));
    // sign flip doesn't have borrow issues
    acc = BigInt::fromHex("0x0");
    other = BigInt::fromHex("0xffffffff");
    acc -= other;
    EXPECT_TRUE(acc == BigInt::fromHex("-0xffffffff"));
    // large lhs calls subFast
    acc = BigInt::fromString("1103683521533416810801464270896097837630394519661871839874");
    other = BigInt::fromString("282196875078258189890420276242139499773");
    acc -= other;
    EXPECT_TRUE(acc == BigInt::fromString("1103683521533416810519267395817839647739974243419732340101"));
    acc = BigInt::fromString("-3607010783138976833865131730937261778539608380545227158417");
    other = BigInt::fromString("-261828009071500033897964552257341661899");
    acc -= other;
    EXPECT_TRUE(acc == BigInt::fromString("-3607010783138976833603303721865761744641643828287885496518"));
    // subFast can't sign flip
    acc = BigInt::fromHex("0x100000000");
    other = BigInt::fromHex("0xffffffff");
    acc -= other;
    EXPECT_TRUE(acc == BigInt::fromHex("0x1"));
    // rvalue
    // same size
    acc = BigInt::fromString("147968067736898279627815667188484417617");
    acc.chunks.shrink_to_fit();
    other = BigInt::fromString("314572354729061370316602711598689275077");
    other.chunks.shrink_to_fit();
    acc -= std::move(other);
    EXPECT_TRUE(acc == BigInt::fromString("-166604286992163090688787044410204857460"));
    // lhs bigger
    acc = BigInt::fromString("6218352000158358030590824163967404056005143046424855052853");
    acc -= BigInt::fromString("242433706040101500561690075882827090414");
    EXPECT_TRUE(acc == BigInt::fromString("6218352000158358030348390457927302555443452970542027962439"));
    // rhs bigger
    acc = BigInt::fromString("165712670758291666371253648400215323307");
    acc -= BigInt::fromString("2217932033840269672707125676049557795918495141877349307836");
    EXPECT_TRUE(acc == BigInt::fromString("-2217932033840269672541413005291266129547241493477133984529"));
}

TEST(BigIntSubOps, InfixSubWorks)
{
    BigInt lhs, rhs;
    // left bigger than right
    lhs = BigInt(1582134291899487761);
    rhs = BigInt(2638178539);
    EXPECT_TRUE(lhs - rhs == BigInt(1582134289261309222));
    // right bigger than left
    lhs = BigInt(169533693);
    rhs = BigInt(4488426789387015066);
    EXPECT_TRUE(lhs - rhs == BigInt(-4488426789217481373));
    // right moved
    lhs = BigInt(362657849);
    EXPECT_TRUE(lhs - BigInt(2859135712) == BigInt(-2496477863));
    // left moved
    rhs = BigInt(284104690);
    EXPECT_TRUE(BigInt(2365192410) - rhs == BigInt(2081087720));
    // both moved left bigger
    EXPECT_TRUE(BigInt::fromString("250736997386107289260317044647808577043") - BigInt(752277597) == BigInt::fromString("250736997386107289260317044647056299446"));
    // both moved right bigger
    EXPECT_TRUE(BigInt(1642456746) - BigInt::fromString("116296219521378538554904422088062008572") == BigInt::fromString("-116296219521378538554904422086419551826"));
    // same obj
    lhs = BigInt::fromString("173473284751765116448107938222259445965");
    EXPECT_TRUE(lhs - lhs == BigInt(0));
    lhs = BigInt::fromString("313274230291623299606732818944963080996");
    EXPECT_TRUE(lhs - std::move(lhs) == BigInt(0));
    lhs = BigInt::fromString("153522122994011019750186024492774403318");
    EXPECT_TRUE(std::move(lhs) - lhs == BigInt(0));
    lhs = BigInt::fromString("191444422150900798151728273102247149234");
    EXPECT_TRUE(std::move(lhs) - std::move(lhs) == BigInt(0));
}

TEST(BigIntSubOps, DecWorks)
{
    // sign flip
    BigInt big;
    big = BigInt(0);
    EXPECT_TRUE(--big == BigInt(-1));
    EXPECT_TRUE(big == BigInt(-1));
    big = BigInt(0);
    EXPECT_TRUE(big-- == BigInt(0));
    EXPECT_TRUE(big == BigInt(-1));
    // pos
    big = BigInt::fromString("131883171374669136241532969496131018641");
    EXPECT_TRUE(--big == BigInt::fromString("131883171374669136241532969496131018640"));
    EXPECT_TRUE(big == BigInt::fromString("131883171374669136241532969496131018640"));
    big = BigInt::fromString("339169940416928283976867009621823468078");
    EXPECT_TRUE(big-- == BigInt::fromString("339169940416928283976867009621823468078"));
    EXPECT_TRUE(big == BigInt::fromString("339169940416928283976867009621823468077"));
    // neg
    big = BigInt::fromString("-316652289499396129698476094687737893156");
    EXPECT_TRUE(--big == BigInt::fromString("-316652289499396129698476094687737893157"));
    EXPECT_TRUE(big == BigInt::fromString("-316652289499396129698476094687737893157"));
    big = BigInt::fromString("-87190312766657060366033866266410310219");
    EXPECT_TRUE(big-- == BigInt::fromString("-87190312766657060366033866266410310219"));
    EXPECT_TRUE(big == BigInt::fromString("-87190312766657060366033866266410310220"));
}

TEST(BigIntSubOps, NegateWorks)
{
    BigInt big;
    // lvalue
    big = BigInt(0);
    EXPECT_TRUE(-big == BigInt(0));
    big = BigInt(1);
    EXPECT_TRUE(-big == BigInt(-1));
    big = BigInt(-1);
    EXPECT_TRUE(-big == BigInt(1));
    big = BigInt::fromString("126870752898214067835826956219048698317");
    EXPECT_TRUE(-big == BigInt::fromString("-126870752898214067835826956219048698317"));
    big = BigInt::fromString("-59115462399658250346826473936791592985");
    EXPECT_TRUE(-big == BigInt::fromString("59115462399658250346826473936791592985"));
    // rvalue
    EXPECT_TRUE(-BigInt(0) == BigInt(0));
    EXPECT_TRUE(-BigInt(1) == BigInt(-1));
    EXPECT_TRUE(-BigInt(-1) == BigInt(1));
    EXPECT_TRUE(-BigInt::fromString("22751580910313383077913392923626820855") == BigInt::fromString("-22751580910313383077913392923626820855"));
    EXPECT_TRUE(-BigInt::fromString("-105428805275251174898503613186821834567") == BigInt::fromString("105428805275251174898503613186821834567"));
}

TEST(BigIntMulOps, SmallMulWorks)
{
    // mul assign
    auto lhs = BigInt::fromString("208990938212438221051793465806953292805");
    lhs *= BigInt::fromString("89952526011043286477560912970076518794");
    EXPECT_TRUE(lhs == BigInt::fromString("18799262805626689404449386367241101497430886906210838163644160483629767477170"));
    // infix mul
    EXPECT_TRUE(BigInt::fromString("141568561781325403383098860354483467178") * BigInt::fromString("144612517754537690773054331955552575159") == BigInt::fromString("20472586154086285871813986416465847334330107130741145019054056571228754631302"));
    // pos neg
    EXPECT_TRUE(BigInt::fromString("27987456898229571791307061459983687774") * BigInt::fromString("-79917376323200901187916857972372126531") == BigInt::fromString("-2236684125265177714630657832899744537034941241068228543600458359375925731994"));
    // neg pos
    EXPECT_TRUE(BigInt::fromString("-186332210822491902673006135314571891853") * BigInt::fromString("322185194915529554991354199371830326337") == BigInt::fromString("-60033479662886099281002804769458869023025281878420268332665887446148461632461"));
    // neg neg
    EXPECT_TRUE(BigInt::fromString("-177342835956564176824871247178147603765") * BigInt::fromString("-120211946819933641307023269780709715381") == BigInt::fromString("21318727564906708415585634544484983740391719260809448703869122923180314009465"));
}

TEST(BigIntMulOps, Toom2Works)
{
    // Toom2Thresh = 550
    // sqrt(550) = 23.5
    // both sides are atleast 24 chunks
    auto lhs = BigInt::fromString("166761980331537136226489176884364506000981218102098661939370637060583651707419466989009715150875872382382312905716759787009487499758649115216871159036572164628339139730876537123268757842025850102343104817135557617221139173266017116");
    auto rhs = BigInt::fromString("1397318371973035919656114717900648258628998572794984953703560130027648922196040255992439526541076606985354847569876017788092930508510497284566126564859858329324529733786906743390648011321692480325452398688061186542327675358721177568");
    EXPECT_TRUE(lhs * rhs == BigInt::fromString("233019578863862908013575095405741096770097599932412129101363656155976106411013793644301416755546500305309354108965187470794740402071813165656013570107218222197925560352286603603765066139706898782499878586492885517686362815742261791099574734264575919999007121372783565027517327935560866698603242972007282662084445858967330887958676657534549846324958408874648149540756038006143211883798444045881412454595476661237314043360484483920300153920035126884944368763253888"));
}

TEST(BigIntMulOps, Toom3Works)
{
    // Toom3Thresh = 2200
    // sqrt(2200) = 46.9
    // both sides are atleast 47 chunks
    auto lhs = BigInt::fromString("361987489559061080742775388504576693138988602661174278193829082591098524753033607963852899673015906822159825119033510270775247071855138469425757586562472497066579507270081426710966368629367830819552403805884325451667530991832764046507748391156461092888229826763433829757332438457023144756726472931356239341675529314246890096023296870739856233585257754199957406095571233229882444815333127362036032980200958077073896802693898486590099292812974877173103459");
    auto rhs = BigInt::fromString("290430068059115962151622120164170255734714690535748812846875362839888416815493430920032564816355585122805109211869416452050701056067668515398757786361456782306110487773490116442984217936213028395285350454465759314711860660073796678738552813607747379020444256623566938561226689854423308537093507265923525879324478217300355344654396067613124351950772986292471505677955516057316088579165996928709031570089465945169928264427849676063748201845465136674824226");
    EXPECT_TRUE(lhs * rhs == BigInt::fromString("105132051229186638428411908836829753946332586584002676809559959825381377811796735582712311229513373409132180930161857292271544718611803024531102459704441980117765395458435682008935872820488623252008358582756641387658721152006644810564804290706473583972929068869025124068420331483875517231560379345700550967305125008454096272656553025578868059534489239977505114254748187734668352063483315124824074440967122125546125355588796450504764070792245721806071829069322183960240696401005615911261260596616999723404145157610428216310008843682854369298480601190343646149575504143754688805267603111099097313814039195620495928467329924055516421776160808659497585815670753673613557180006463109953095362466429202875794389030905220764119610966331043154096825885353358660204224500917696327767557280726641778732641778297011352005368406901034417574194242777980745204105567689847142419993900712971356727531604751290033737597734"));
}

TEST(BigIntDivModOps, Works)
{
    // pos pos
    EXPECT_TRUE(BigInt::fromString("139387726524269028282214103213234099108") / BigInt(1518398810535480380) == BigInt::fromString("91799154186054968203"));
    EXPECT_TRUE(BigInt::fromString("141525490151079884065945864516820719931") % BigInt(7235830146665277635) == BigInt(441877497937542706));
    // pos neg
    EXPECT_TRUE(BigInt::fromString("225560602272341244603355522105284968376") / BigInt(-749262884178019311) == BigInt::fromString("-301043341443227977082"));
    EXPECT_TRUE(BigInt::fromString("161270493232803252737118979756816467191") % BigInt(-1009271480112003349) == BigInt(935459410198268386));
    // neg pos
    EXPECT_TRUE(BigInt::fromString("-64841685909559032866131051408367280170") / BigInt(6182749243719021809) == BigInt::fromString("-10487516694200544604"));
    EXPECT_TRUE(BigInt::fromString("-228491571861745029240647230450300994693") % BigInt(8654852012993924760) == BigInt(-3173173044762874733));
    // neg neg
    EXPECT_TRUE(BigInt::fromString("-314782659620462297259167800440843451933") / BigInt(-4010301222104162184) == BigInt::fromString("78493520109020439256"));
    EXPECT_TRUE(BigInt::fromString("-128010304219658244330832188821155117404") % BigInt(-4642734543508590940) == BigInt(-4532001667705171864));
    // small large
    EXPECT_TRUE(BigInt(3024112648356590705) / BigInt::fromString("41815209219475073694443040228568777389") == BigInt(0));
    EXPECT_TRUE(BigInt(5385988462955792682) % BigInt::fromString("224364014742806355453492366495645548108") == BigInt(5385988462955792682));
    // these inputs hit divmodAddBack internally
    EXPECT_TRUE(BigInt::fromString("19122993964741265205004922666831139784902809462") % BigInt(1000000000000000000) == BigInt(831139784902809462));
    // assign
    auto big1 = BigInt::fromString("190588910553216662708443483383766888162");
    big1 /= BigInt(1959902019257340062);
    EXPECT_TRUE(big1 == BigInt::fromString("97244101327797989091"));
    auto big2 = BigInt::fromString("27432475326302439864505357526466838465");
    big2 %= BigInt(4618571638942349066);
    EXPECT_TRUE(big2 == BigInt(1049279397132927697));
}

TEST(BigIntBitwiseOps, AssignWorks)
{
    BigInt big1, big2;
    // rvalue
    // small large
    big1 = BigInt(3612913089679992449);
    big1 &= BigInt::fromString("160140883010512738883913455915332544368");
    EXPECT_TRUE(big1 == BigInt::fromString("3468617581694035456"));
    big1 = BigInt(4761746248047252716);
    big1 |= BigInt::fromString("301488843578595278042804271169874222334");
    EXPECT_TRUE(big1 == BigInt::fromString("301488843578595278047560354069749947646"));
    big1 = BigInt(2770559850873482291);
    big1 ^= BigInt::fromString("61721888489530569772363106232534873974");
    EXPECT_TRUE(big1 == BigInt::fromString("61721888489530569770233185636948204357"));
    // large small
    big1 = BigInt::fromString("113789642721887372206649239689960493107");
    big1 &= BigInt(8605746940649191107);
    EXPECT_TRUE(big1 == BigInt::fromString("1306255132656406531"));
    big1 = BigInt::fromString("78686554405440943747024611894231524961");
    big1 |= BigInt(4004684342021864203);
    EXPECT_TRUE(big1 == BigInt::fromString("78686554405440943747493395411557646187"));
    big1 = BigInt::fromString("240307248876206098908728029606593010510");
    big1 ^= BigInt(7974194666391867028);
    EXPECT_TRUE(big1 == BigInt::fromString("240307248876206098916701088440831940058"));
    // lvalue
    big1 = BigInt::fromString("267432860109520355724006778154930945309");
    big2 = BigInt(9046368477566300142);
    big1 &= big2;
    EXPECT_TRUE(big1 == BigInt(6125775102937148684));
    big1 = BigInt(5771006729540459356);
    big2 = BigInt::fromString("189170453402146400413966533371091326803");
    big1 |= big2;
    EXPECT_TRUE(big1 == BigInt::fromString("189170453402146400419735789639222288223"));
    big1 = BigInt::fromString("318301275946496104038527178046309019016");
    big2 = BigInt(6463543353517598465);
    big1 ^= big2;
    EXPECT_TRUE(big1 == BigInt::fromString("318301275946496104044900648453788060297"));
    // negative
    big1 = BigInt(-9058765637860077823);
    big2 = BigInt::fromString("45925541915078723910544038346590700407");
    big1 &= big2;
    EXPECT_TRUE(big1 == BigInt::fromString("45925541915078723902458947807891997441"));
    big1 = BigInt::fromString("271369340990767080797628202056290129183");
    big2 = BigInt(-1203640520437074273);
    big1 |= big2;
    EXPECT_TRUE(big1 == BigInt::fromString("-49557329825237089"));
    big1 = BigInt(-8217380184030156303);
    big2 = BigInt::fromString("319084512759343260452923647487450940525");
    big1 ^= big2;
    EXPECT_TRUE(big1 == BigInt::fromString("-319084512759343260454223379715079639652"));
    // overflows
    big1 = BigInt::fromHex("-0xffffffff");
    big2 = BigInt::fromHex("-0x2");
    big1 &= big2;
    EXPECT_TRUE(big1 == BigInt::fromHex("-0x100000000"));
    big1 = BigInt::fromHex("-0xf55f0ab");
    big2 = BigInt::fromHex("0xf0aa0f55");
    big1 ^= big2;
    EXPECT_TRUE(big1 == BigInt::fromHex("-0x100000000"));
    // same obj
    auto big1copy = big1;
    big1 &= big1;
    EXPECT_TRUE(big1 == big1copy);
    big1 |= big1;
    EXPECT_TRUE(big1 == big1copy);
    big1 ^= big1;
    EXPECT_TRUE(big1 == BigInt(0));
}

TEST(BigIntBitwiseOps, NotWorks)
{
    // lvalue
    auto big1 = BigInt::fromString("96558561699736801337130713178561296466");
    EXPECT_TRUE(~big1 == BigInt::fromString("-96558561699736801337130713178561296467"));
    // rvalue
    EXPECT_TRUE(~BigInt::fromString("11718796510786186563890241642872635206") == BigInt::fromString("-11718796510786186563890241642872635207"));
}

TEST(BigIntBitwiseOps, InfixWorks)
{
    BigInt big1, big2;
    // big small
    big1 = BigInt::fromString("191126185292397871665516031412926666469");
    big2 = BigInt(7892608220221960031);
    EXPECT_TRUE((big1 & big2) == BigInt(975064881730438725));
    big1 = BigInt::fromString("160876994951805824039256891181773583606");
    big2 = BigInt(7596879757124223546);
    EXPECT_TRUE((big1 | big2) == BigInt::fromString("160876994951805824043888994306968516350"));
    big1 = BigInt::fromString("208281935733804057731030556787656584499");
    big2 = BigInt(8748192332672489034);
    EXPECT_TRUE((big1 ^ big2) == BigInt::fromString("208281935733804057728083005328711891833"));
    // small big
    big1 = BigInt(2071856380403681848);
    big2 = BigInt::fromString("270430656011422732612884506582045283376");
    EXPECT_TRUE((big1 & big2) == BigInt::fromString("1441349820946350128"));
    big1 = BigInt(7584226799424580119);
    big2 = BigInt::fromString("230737599275228594453438068195090955041");
    EXPECT_TRUE((big1 | big2) == BigInt::fromString("230737599275228594458139848265034627895"));
    big1 = BigInt(1295992673990703885);
    big2 = BigInt::fromString("119965308135476222780520014007284464893");
    EXPECT_TRUE((big1 ^ big2) == BigInt::fromString("119965308135476222779230794532694231024"));
    // lvalue rvalue
    big1 = BigInt::fromString("213828757536377136850296524263334442175");
    EXPECT_TRUE((big1 & BigInt::fromString("23648857629585114097286414607532657928")) == BigInt::fromString("1041272568174222540247168340670874632"));
    big1 = BigInt::fromString("221774438131532196249346656772191313125");
    EXPECT_TRUE((big1 | BigInt::fromString("337630575727225188867314990291363775398")) == BigInt::fromString("338753166557528025687368709600779919335"));
    big1 = BigInt::fromString("5118089215060220015903195811229729572");
    EXPECT_TRUE((big1 ^ BigInt::fromString("44588790418530735413864048646259203437")) == BigInt::fromString("45623584203940772509545004557984587337"));
    // rvalue lvalue
    big2 = BigInt::fromString("181402405101841228427402302731255097724");
    EXPECT_TRUE((BigInt::fromString("162970170370986740459921405505968792935") & big2) == BigInt::fromString("10762353751686111737774083125362893156"));
    big2 = BigInt::fromString("141309322538131749588924935561171461954");
    EXPECT_TRUE((BigInt::fromString("86373208316818965776186994128334035980") | big2) == BigInt::fromString("142227394756546908888032581891322249038"));
    big2 = BigInt::fromString("284343153370929015486857755400929969672");
    EXPECT_TRUE((BigInt::fromString("195665678831101786044227879856990516777") ^ big2) == BigInt::fromString("94176118194772566616015122243661099041"));
    // move big small
    EXPECT_TRUE((BigInt(4691689377200409398) & BigInt::fromString("193502109992166369958685700142021597452")) == BigInt(4683764090936559876));
    EXPECT_TRUE((BigInt(6369262035065754487) | BigInt::fromString("281509671713320409733043467097493276171")) == BigInt::fromString("281509671713320409733044603997097154431"));
    EXPECT_TRUE((BigInt(8978358284073963507) ^ BigInt::fromString("245538361872659366903941117245209734878")) == BigInt::fromString("245538361872659366910604324053551309101"));
    // move small big
    EXPECT_TRUE((BigInt::fromString("123831536722648608262164964265179931084") & BigInt(3768088794448444385)) == BigInt(3458818163515498944));
    EXPECT_TRUE((BigInt::fromString("186569104876024722335821623545800408235") | BigInt(2889598130147918482)) == BigInt::fromString("186569104876024722335823921662710759099"));
    EXPECT_TRUE((BigInt::fromString("293870858589525163351437814436088209513") ^ BigInt(3466997980255505477)) == BigInt::fromString("293870858589525163354893553391169907756"));
}

TEST(BigIntShiftOps, AssignWorks)
{
    BigInt big;
    // non aligned
    big = BigInt::fromString("125803290773658062339890520828827770459");
    big <<= 104;
    EXPECT_TRUE(big == BigInt::fromString("2551593872958625866873397225340077103401021815497918573930061804601344"));
    big = BigInt::fromString("-38204402160635878733382265034550550660");
    big <<= 115;
    EXPECT_TRUE(big == BigInt::fromString("-1586948778566966833891264092422049639451836888446546102200823721104506880"));
    big = BigInt::fromString("215815998173247886970891187659071285146");
    big >>= 67;
    EXPECT_TRUE(big == BigInt::fromString("1462426087978518846"));
    big = BigInt::fromString("-150645521659204619314346832388778782381");
    big >>= 94;
    EXPECT_TRUE(big == BigInt::fromString("-7605655206"));
    // aligned
    big = BigInt::fromString("238035109463796576382640746321586432394");
    big <<= 64;
    EXPECT_TRUE(big == BigInt::fromString("4390972744836093900048943721563591249621162409550837448704"));
    big = BigInt::fromString("-168611094341864636150559753734933275946");
    big <<= 96;
    EXPECT_TRUE(big == BigInt::fromString("-13358747184225207517649168019451556784201674835055364648366407417856"));
    big = BigInt::fromString("72596757293014322456540821391903228261");
    big >>= 32;
    EXPECT_TRUE(big == BigInt::fromString("16902749727716278856746112320"));
    big = BigInt::fromString("-51580473263649253377770300427782692842");
    big >>= 64;
    EXPECT_TRUE(big == BigInt::fromString("-2796183058513949882"));
    // zero
    big = BigInt::fromString("172545143330868692448549030763751941438");
    big <<= 0;
    EXPECT_TRUE(big == BigInt::fromString("172545143330868692448549030763751941438"));
    big = BigInt::fromString("-253844158409388167287356114229851308133");
    big <<= 0;
    EXPECT_TRUE(big == BigInt::fromString("-253844158409388167287356114229851308133"));
    big = BigInt::fromString("138886312953704067892565580779943123198");
    big >>= 0;
    EXPECT_TRUE(big == BigInt::fromString("138886312953704067892565580779943123198"));
    big = BigInt::fromString("-138886312953704067892565580779943123198");
    big >>= 0;
    EXPECT_TRUE(big == BigInt::fromString("-138886312953704067892565580779943123198"));
    // crazy shift right
    big = BigInt::fromString("66087997715172092365235992228821524600");
    big >>= 278;
    EXPECT_TRUE(big == BigInt(0));
    big = BigInt::fromString("-190196577250641720851391608026620855800");
    big >>= 276;
    EXPECT_TRUE(big == BigInt(-1));
}

TEST(BigIntShiftOps, InfixWorks)
{
    BigInt big;
    // lvalue
    big = BigInt::fromString("44187682044133800476922581792310327958");
    EXPECT_TRUE(big << 121 == BigInt::fromString("117471008083810172285874021321890010512333736506097072945492684863612911616"));
    big = BigInt::fromString("159113560141393377296943481585594629792");
    EXPECT_TRUE(big >> 85 == BigInt::fromString("4112989129476"));
    // rvalue
    EXPECT_TRUE(BigInt::fromString("184316900689456028030833447729495365932") << 112 == BigInt::fromString("957028064424738338967489209078179590617936590630788564456908675688169472"));
    EXPECT_TRUE(BigInt::fromString("272044912937764710902171231292648911299") >> 89 == BigInt::fromString("439512261183"));
}

TEST(BigIntCmpOps, BoolWorks)
{
    EXPECT_FALSE(BigInt(0));
    EXPECT_TRUE(BigInt(-1));
    EXPECT_TRUE(BigInt::fromString("246030614478810129216754222428951589152"));
    EXPECT_TRUE(BigInt::fromString("-25454769754104775365858529352502498581"));
}

TEST(BigIntCmpOps, EqWorks)
{
    EXPECT_TRUE(BigInt(0) == BigInt(0));
    EXPECT_TRUE(BigInt(-1) == BigInt(-1));
    EXPECT_TRUE(BigInt(0) != BigInt(-1));
    EXPECT_FALSE(BigInt(0) != BigInt(0));
    EXPECT_FALSE(BigInt(-1) != BigInt(-1));
    EXPECT_TRUE(BigInt::fromString("316511035238649226698408876593026200799") == BigInt::fromString("316511035238649226698408876593026200799"));
    EXPECT_TRUE(BigInt::fromString("-307421348530949880863779343924690873178") == BigInt::fromString("-307421348530949880863779343924690873178"));
    EXPECT_TRUE(BigInt::fromString("272402216571513199471668763834485744228") != BigInt::fromString("-4214057921117509118756261330583481930"));
    EXPECT_TRUE(BigInt::fromString("314738724175592610150159384984455173561") != BigInt::fromString("219392969720502347260298926425630171413"));
    EXPECT_FALSE(BigInt::fromString("12348472322468412239054173354756888233") != BigInt::fromString("12348472322468412239054173354756888233"));
    EXPECT_FALSE(BigInt::fromString("-72830791278637893593029353953389212455") != BigInt::fromString("-72830791278637893593029353953389212455"));
    // same obj
    auto big = BigInt::fromString("167701367002829114418272188120382652435");
    EXPECT_TRUE(big == big);
    EXPECT_FALSE(big != big);
}

TEST(BigIntCmpOps, CmpWorks)
{
    EXPECT_TRUE(BigInt::fromString("85386632987013786074729799414633561493") < BigInt::fromString("243635199290603149437090728068546504393"));
    EXPECT_TRUE(BigInt::fromString("23521270296437513665807922173038930628") > BigInt::fromString("16993114754913685601882599845235925998"));
    EXPECT_TRUE(BigInt::fromString("6018452072676614741940535319493372348") <= BigInt::fromString("150511130366899033912466131628869158842"));
    EXPECT_TRUE(BigInt::fromString("257217134591605415049743527006798067852") >= BigInt::fromString("104091558923412983050054657353477127396"));
    // same val
    EXPECT_FALSE(BigInt::fromString("306485467936439915755047455696471428618") < BigInt::fromString("306485467936439915755047455696471428618"));
    EXPECT_FALSE(BigInt::fromString("14067689637752303813271824282692342574") > BigInt::fromString("14067689637752303813271824282692342574"));
    EXPECT_TRUE(BigInt::fromString("298258294337849000215008489112578897366") <= BigInt::fromString("298258294337849000215008489112578897366"));
    EXPECT_TRUE(BigInt::fromString("246226096339941343558184574781346757870") >= BigInt::fromString("246226096339941343558184574781346757870"));
    // same obj
    auto big = BigInt::fromString("272700903047097367072406234543406722147");
    EXPECT_FALSE(big < big);
    EXPECT_FALSE(big > big);
    EXPECT_TRUE(big <= big);
    EXPECT_TRUE(big >= big);
    // rvalue overloads
    auto lhs = BigInt::fromString("289363133104820537166196644380981858349");
    auto rhs = BigInt::fromString("209374968857833432629319355180392576255");
    EXPECT_FALSE(lhs < rhs);
    EXPECT_FALSE(lhs < BigInt::fromString("93151719828215136083651060912541684809"));
    EXPECT_TRUE(BigInt::fromString("98696310550729056733039619239469236303") < rhs);
    EXPECT_TRUE(BigInt::fromString("88807723886191649185632380861854384327") < BigInt::fromString("138670621298285178317743514700496725835"));
}

TEST(BigIntToInteger, Works)
{
    EXPECT_TRUE(BigInt(42).toInteger() == 42);
    EXPECT_TRUE(BigInt(-42).toInteger() == -42);
    EXPECT_TRUE(BigInt(-4294967296).toInteger() == -4294967296);
    EXPECT_TRUE(BigInt(static_cast<int64_t>(0x8000'0000'0000'0000)).toInteger() == static_cast<int64_t>(0x8000'0000'0000'0000));
    // integer result is just truncated
    EXPECT_TRUE(BigInt::fromHex("0xffffffffffffffff").toInteger() == -1);
    EXPECT_TRUE(BigInt::fromHex("0x10000000000000000").toInteger() == 0);
    EXPECT_TRUE(BigInt::fromHex("0xf000000000000002a").toInteger() == 42);
}

TEST(BigIntToDouble, Works)
{
    double x;
    x = 42.0;
    EXPECT_TRUE(BigInt(x).toDouble() == x);
    x = 58279040200274790737799078014627472768784896053910301999766280991075999143173.0;
    EXPECT_TRUE(BigInt(x).toDouble() == x);
    x = -113915667999065675537741908772048180611206149260931812324424238027627166884238.0;
    EXPECT_TRUE(BigInt(x).toDouble() == x);
}

TEST(BigIntToString, Works)
{
    // rvalue
    EXPECT_TRUE(BigInt(0).toString() == "0");
    EXPECT_TRUE(BigInt(-1).toString() == "-1");
    EXPECT_TRUE(BigInt(42).toString() == "42");
    EXPECT_TRUE(BigInt::fromString("39319932322470870728537033831382841147").toString() == "39319932322470870728537033831382841147");
    EXPECT_TRUE(BigInt::fromString("88340730844059161829142520199020189664").toString() == "88340730844059161829142520199020189664");
    EXPECT_TRUE(BigInt::fromString("4778131972598404387131229886230279785").toString() == "4778131972598404387131229886230279785");
    EXPECT_TRUE(BigInt::fromString("-237056874147820773527468850533351191438").toString() == "-237056874147820773527468850533351191438");
    EXPECT_TRUE(BigInt::fromString("-310541075083408736158864660750446673005").toString() == "-310541075083408736158864660750446673005");
    EXPECT_TRUE(BigInt::fromString("-7898936895695507665301422626411256655").toString() == "-7898936895695507665301422626411256655");
    EXPECT_TRUE(BigInt::fromString("-320561019721024089963971178618185566968").toString() == "-320561019721024089963971178618185566968");
    // lvalue
    BigInt big;
    big = BigInt::fromString("33323094306873600895659607286095226850");
    EXPECT_TRUE(big.toString() == "33323094306873600895659607286095226850");
    big = BigInt::fromString("-167068738971371546148623968665648245066");
    EXPECT_TRUE(big.toString() == "-167068738971371546148623968665648245066");
}

TEST(BigIntToHex, Works)
{
    // rvalue and lvalue are passed by const &
    EXPECT_TRUE(BigInt(0).toHex() == "0x0");
    EXPECT_TRUE(BigInt(-1).toHex() == "-0x1");
    EXPECT_TRUE(BigInt::fromString("116243201062464284689812801549962602295").toHex() == "0x5773a04d0e05f6e59bbeefdac80c6737");
    EXPECT_TRUE(BigInt::fromString("-200380197899849194930046467999277295298").toHex() == "-0x96bfd284dbb62aad29ecf18fe5e0a6c2");
    EXPECT_TRUE(BigInt::fromString("241293769526998316206544976813421387230").toHex() == "0xb5877d57408b8ccfc2acab0854c65dde");
    BigInt big;
    big = BigInt::fromString("45333991657062742294074377008549958986");
    EXPECT_TRUE(big.toHex() == "0x221b025b224b015ad049d8d06cab954a");
    big = BigInt::fromString("-180125769058078106111204992277916812536");
    EXPECT_TRUE(big.toHex() == "-0x8782f613b97e3f2167dce937a38a04f8");
}

TEST(BigIntFromString, HandlesNegativeNumbers)
{
    EXPECT_TRUE(BigInt::fromString("-265906272144445970474687398888444483909") == BigInt::fromString("389385227292137870763754") - BigInt::fromString("265906272144446359859914691026315247663"));
    EXPECT_TRUE(BigInt::fromString("-259414844928525599982454671789133210796") == BigInt::fromString("-259414844928526044539429364716772824696") + BigInt::fromString("444556974692927639613900"));
}

TEST(BigIntFromString, HandlesLargeNumbers)
{
    EXPECT_TRUE(BigInt::fromString("68972475246296519034889131508996078237840293865047801") == BigInt::fromString("689724752462965190348891315") * BigInt::fromString("100000000000000000000000000") + BigInt::fromString("08996078237840293865047801"));
}

TEST(BigIntFromString, ThrowsExceptionOnInvalidArgument)
{
    // no payload
    EXPECT_THROW(BigInt::fromString(""), std::invalid_argument);
    EXPECT_THROW(BigInt::fromString("-"), std::invalid_argument);
    // non digit payload
    EXPECT_THROW(BigInt::fromString("foo"), std::invalid_argument);
    EXPECT_THROW(BigInt::fromString("0x42"), std::invalid_argument);
    EXPECT_THROW(BigInt::fromString("123456789012345678901234567890x"), std::invalid_argument);
    // prefix 0 is fine
    EXPECT_TRUE(BigInt::fromString("00000000000000000000000000000000000000000") == BigInt(0));
    EXPECT_TRUE(BigInt::fromString("-000000000000000000000000000000000000000000") == BigInt(0));
    EXPECT_TRUE(BigInt::fromString("0000000000000000000000000000000000000042") == BigInt(42));
    EXPECT_TRUE(BigInt::fromString("-00000000000000000000000000000000000000010000") == BigInt(-10000));
}

TEST(BigIntFromHex, Works)
{
    EXPECT_TRUE(BigInt::fromHex("0x0") == BigInt(0));
    EXPECT_TRUE(BigInt::fromHex("-0x1") == BigInt(-1));
    EXPECT_TRUE(BigInt::fromHex("-0x0") == BigInt(0));
    EXPECT_TRUE(BigInt::fromHex("0x55c5210b8a23d4790381a6be9585f134") == BigInt::fromString("114007932356628165534711010869329129780"));
    EXPECT_TRUE(BigInt::fromHex("-0x13c64e018b4a3d0c48c409f6903c14ce") == BigInt::fromString("-26284988848188709966956935762954425550"));
    EXPECT_TRUE(BigInt::fromHex("0xda046a5530b7341e8551b16f4c75d865843") == BigInt::fromString("1186998800193267140262124836571720630818883"));
    EXPECT_TRUE(BigInt::fromHex("-0xa53c3f2ae6006fe9b021ffe899604113db2b2") == BigInt::fromString("-230304449357774213709615252051285371449619122"));
    // no payload
    EXPECT_THROW(BigInt::fromHex(""), std::invalid_argument);
    EXPECT_THROW(BigInt::fromHex("-"), std::invalid_argument);
    EXPECT_THROW(BigInt::fromHex("0x"), std::invalid_argument);
    EXPECT_THROW(BigInt::fromHex("-0x"), std::invalid_argument);
    // garbage payload
    EXPECT_THROW(BigInt::fromHex("foobar"), std::invalid_argument);
    EXPECT_THROW(BigInt::fromHex("0xabc12341234ggabc"), std::invalid_argument);
    EXPECT_THROW(BigInt::fromHex("0xjunk01234567"), std::invalid_argument);
    // prefix 0 is fine
    EXPECT_TRUE(BigInt::fromHex("0x0000000000001") == BigInt(1));
    EXPECT_TRUE(BigInt::fromHex("-0x00000000002") == BigInt(-2));
}
