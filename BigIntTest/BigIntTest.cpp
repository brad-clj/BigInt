#include <stdexcept>
#include <utility>
#include <gtest/gtest.h>
#include "BigInt.h"

TEST(BigIntDefaultCtor, IsZero)
{
    EXPECT_TRUE(BigInt() == BigInt(0));
    EXPECT_TRUE(BigInt() == BigInt(-5) + BigInt(5));
    EXPECT_TRUE(BigInt() == BigInt("0"));
}

TEST(BigIntIntCtor, HandlesNegativeNumbers)
{
    EXPECT_TRUE(BigInt(-1'423'786'792) == BigInt(-1'423'786'834) + BigInt(42));
    EXPECT_TRUE(BigInt(-42) == BigInt(42) - BigInt(84));
}

TEST(BigIntIntCtor, HandlesLargeNumbers)
{
    EXPECT_TRUE(BigInt(930'350'724'101'083'004) == BigInt(930'350'724) * BigInt(1'000'000'000) + BigInt(101'083'004));
}

TEST(BigIntStringCtor, HandlesNegativeNumbers)
{
    EXPECT_TRUE(BigInt("-265906272144445970474687398888444483909") == BigInt("389385227292137870763754") - BigInt("265906272144446359859914691026315247663"));
    EXPECT_TRUE(BigInt("-259414844928525599982454671789133210796") == BigInt("-259414844928526044539429364716772824696") + BigInt("444556974692927639613900"));
}

TEST(BigIntStringCtor, HandlesLargeNumbers)
{
    EXPECT_TRUE(BigInt("68972475246296519034889131508996078237840293865047801") == BigInt("689724752462965190348891315") * BigInt("100000000000000000000000000") + BigInt("08996078237840293865047801"));
}

TEST(BigIntStringCtor, ThrowsExceptionOnInvalidArgument)
{
    // no payload
    EXPECT_THROW(BigInt(""), std::invalid_argument);
    EXPECT_THROW(BigInt("-"), std::invalid_argument);
    // non digit payload
    EXPECT_THROW(BigInt("foo"), std::invalid_argument);
    EXPECT_THROW(BigInt("0x42"), std::invalid_argument);
    EXPECT_THROW(BigInt("123456789012345678901234567890x"), std::invalid_argument);
    // prefix 0 is fine
    EXPECT_TRUE(BigInt("0000000000000000000000000000000") == BigInt(0));
    EXPECT_TRUE(BigInt("-000000000000000000000000000000000") == BigInt(0));
}

TEST(BigIntFromHex, Works)
{
    EXPECT_TRUE(BigInt::fromHex("0x0") == BigInt(0));
    EXPECT_TRUE(BigInt::fromHex("-0x1") == BigInt(-1));
    EXPECT_TRUE(BigInt::fromHex("-0x0" /* ugly but fine */) == BigInt(0));
    EXPECT_TRUE(BigInt::fromHex("0x55c5210b8a23d4790381a6be9585f134") == BigInt("114007932356628165534711010869329129780"));
    EXPECT_TRUE(BigInt::fromHex("-0x13c64e018b4a3d0c48c409f6903c14ce") == BigInt("-26284988848188709966956935762954425550"));
    // no payload
    EXPECT_THROW(BigInt::fromHex(""), std::invalid_argument);
    EXPECT_THROW(BigInt::fromHex("-"), std::invalid_argument);
    EXPECT_THROW(BigInt::fromHex("0x"), std::invalid_argument);
    EXPECT_THROW(BigInt::fromHex("-0x"), std::invalid_argument);
    // garbage payload
    EXPECT_THROW(BigInt::fromHex("foobar"), std::invalid_argument);
    EXPECT_THROW(BigInt::fromHex("0xabc12341234ggabc"), std::invalid_argument);
    // prefix 0 is fine
    EXPECT_TRUE(BigInt::fromHex("0x000000001") == BigInt(1));
    EXPECT_TRUE(BigInt::fromHex("-0x00000002") == BigInt(-2));
}

TEST(BigIntAddOps, AddAssignWorks)
{
    // if using the same object for the two arguments the rhs gets copy constructed as a temporary
    BigInt acc1("75755724578284142547987951683356371041");
    acc1 += acc1;
    EXPECT_TRUE(acc1 == BigInt("151511449156568285095975903366712742082"));
    // carry past lim is pop_back'ed with negative rhs
    acc1 += BigInt("-151511449156568285095975903366712742082");
    EXPECT_TRUE(acc1 == BigInt(0));
    // acc2 has this replaced with acc1 as it is an rvalue and has higher capacity
    BigInt acc2(42);
    acc2 += std::move(acc1);
    EXPECT_TRUE(acc2 == BigInt(42));
    // flip to negative
    acc2 += BigInt(-43);
    EXPECT_TRUE(acc2 == BigInt(-1));
    // if it doesn't go positive internally add an additional -1 at the next chunk and set negative bit back
    BigInt acc3(-4293984256);
    acc3 += BigInt(-4279238656);
    EXPECT_TRUE(acc3 == BigInt(-8573222912));
    // repeat addChunk from small negative rhs
    BigInt acc4("275872115513967702182504904667760619899");
    acc4 += BigInt(-1);
    EXPECT_TRUE(acc4 == BigInt("275872115513967702182504904667760619898"));
}

TEST(BigIntAddOps, InfixAddWorks)
{
    // left bigger than right
    BigInt lhs(8761890128033252764);
    BigInt rhs(649602511);
    EXPECT_TRUE(lhs + rhs == BigInt(8761890128682855275));
    // right bigger than left
    lhs = BigInt(2811295173);
    rhs = BigInt(754751497079698868);
    EXPECT_TRUE(lhs + rhs == BigInt(754751499890994041));
    // right moved
    lhs = BigInt(4402506586766798590);
    EXPECT_TRUE(lhs + BigInt(1150734779629110894) == BigInt(5553241366395909484));
    // left moved
    rhs = BigInt(4398547354252609520);
    EXPECT_TRUE(BigInt(4140871994740157499) + rhs == BigInt(8539419348992767019));
    // both moved left bigger
    EXPECT_TRUE(BigInt(8669068799261902808) + BigInt(2084842186) == BigInt(8669068801346744994));
    // both moved right bigger
    EXPECT_TRUE(BigInt(1864966085) + BigInt(2326226595802122250) == BigInt(2326226597667088335));
}

TEST(BigIntAddOps, IncWorks)
{
    // sign flip
    BigInt big;
    big = BigInt(-1);
    EXPECT_TRUE(++big == BigInt(0));
    EXPECT_TRUE(big == BigInt(0));
    big = BigInt(-1);
    EXPECT_TRUE(big++ == BigInt(-1));
    EXPECT_TRUE(big == BigInt(0));
    // pos
    big = BigInt("99985315366833321714781142766284374514");
    EXPECT_TRUE(++big == BigInt("99985315366833321714781142766284374515"));
    EXPECT_TRUE(big == BigInt("99985315366833321714781142766284374515"));
    big = BigInt("260753303325700864907984550614316009524");
    EXPECT_TRUE(big++ == BigInt("260753303325700864907984550614316009524"));
    EXPECT_TRUE(big == BigInt("260753303325700864907984550614316009525"));
    // neg
    big = BigInt("-202158263090152112158386684678448718644");
    EXPECT_TRUE(++big == BigInt("-202158263090152112158386684678448718643"));
    EXPECT_TRUE(big == BigInt("-202158263090152112158386684678448718643"));
    big = BigInt("-335614232706137167485301907811023029400");
    EXPECT_TRUE(big++ == BigInt("-335614232706137167485301907811023029400"));
    EXPECT_TRUE(big == BigInt("-335614232706137167485301907811023029399"));
}

TEST(BigIntSubOps, SubAssignWorks)
{
    // same object gets set to zero
    BigInt acc1("5887548297198228442794705066753318308");
    acc1 -= acc1;
    EXPECT_TRUE(acc1 == BigInt(0));
    // borrow past lim is pop_back'ed with negative rhs
    BigInt acc2("-288840354736677734658173097577585561594");
    acc2 -= BigInt("-288840354736677734658173097577585561593");
    EXPECT_TRUE(acc2 == BigInt(-1));
    // acc3 has this replaced with acc2 as it is an rvalue and has higher capacity
    BigInt acc3(2101752386);
    acc3 -= std::move(acc2);
    EXPECT_TRUE(acc3 == BigInt(2101752387));
    // flip to positive
    BigInt acc4(-1309982692);
    acc4 -= BigInt(-1309982693);
    EXPECT_TRUE(acc4 == BigInt(1));
    // if it doesn't go negative internally sub an additional -1 at the next chunk and set negative bit back
    BigInt acc5(3840);
    acc5 -= BigInt(-4294963456);
    EXPECT_TRUE(acc5 == BigInt(4294967296));
    // repeat subChunk from small negative rhs
    BigInt acc6("202442365473972501334578051198355947013");
    acc6 -= BigInt(-1);
    EXPECT_TRUE(acc6 == BigInt("202442365473972501334578051198355947014"));
}

TEST(BigIntSubOps, InfixSubWorks)
{
    BigInt lhs, rhs;
    // left bigger than right
    lhs = BigInt(1582134291899487761);
    rhs = BigInt(2638178539);
    EXPECT_TRUE(lhs - rhs == BigInt(1582134289261309222));
    // right bigger than left
    lhs = BigInt(169533693);
    rhs = BigInt(4488426789387015066);
    EXPECT_TRUE(lhs - rhs == BigInt(-4488426789217481373));
    // right moved
    lhs = BigInt(362657849);
    EXPECT_TRUE(lhs - BigInt(2859135712) == BigInt(-2496477863));
    // left moved
    rhs = BigInt(284104690);
    EXPECT_TRUE(BigInt(2365192410) - rhs == BigInt(2081087720));
    // both moved left bigger
    EXPECT_TRUE(BigInt(6972182057094648088) - BigInt(752277597) == BigInt(6972182056342370491));
    // both moved right bigger
    EXPECT_TRUE(BigInt(1642456746) - BigInt(6300052287118505211) == BigInt(-6300052285476048465));
    // same obj
    lhs = BigInt("173473284751765116448107938222259445965");
    EXPECT_TRUE(lhs - lhs == BigInt(0));
    lhs = BigInt("313274230291623299606732818944963080996");
    EXPECT_TRUE(lhs - std::move(lhs) == BigInt(0));
    lhs = BigInt("153522122994011019750186024492774403318");
    EXPECT_TRUE(std::move(lhs) - lhs == BigInt(0));
    lhs = BigInt("191444422150900798151728273102247149234");
    EXPECT_TRUE(std::move(lhs) - std::move(lhs) == BigInt(0));
}

TEST(BigIntSubOps, DecWorks)
{
    // sign flip
    BigInt big;
    big = BigInt(0);
    EXPECT_TRUE(--big == BigInt(-1));
    EXPECT_TRUE(big == BigInt(-1));
    big = BigInt(0);
    EXPECT_TRUE(big-- == BigInt(0));
    EXPECT_TRUE(big == BigInt(-1));
    // pos
    big = BigInt("131883171374669136241532969496131018641");
    EXPECT_TRUE(--big == BigInt("131883171374669136241532969496131018640"));
    EXPECT_TRUE(big == BigInt("131883171374669136241532969496131018640"));
    big = BigInt("339169940416928283976867009621823468078");
    EXPECT_TRUE(big-- == BigInt("339169940416928283976867009621823468078"));
    EXPECT_TRUE(big == BigInt("339169940416928283976867009621823468077"));
    // neg
    big = BigInt("-316652289499396129698476094687737893156");
    EXPECT_TRUE(--big == BigInt("-316652289499396129698476094687737893157"));
    EXPECT_TRUE(big == BigInt("-316652289499396129698476094687737893157"));
    big = BigInt("-87190312766657060366033866266410310219");
    EXPECT_TRUE(big-- == BigInt("-87190312766657060366033866266410310219"));
    EXPECT_TRUE(big == BigInt("-87190312766657060366033866266410310220"));
}

TEST(BigIntSubOps, NegateWorks)
{
    BigInt big;
    // lvalue
    big = BigInt(0);
    EXPECT_TRUE(-big == BigInt(0));
    big = BigInt(1);
    EXPECT_TRUE(-big == BigInt(-1));
    big = BigInt(-1);
    EXPECT_TRUE(-big == BigInt(1));
    big = BigInt("126870752898214067835826956219048698317");
    EXPECT_TRUE(-big == BigInt("-126870752898214067835826956219048698317"));
    big = BigInt("-59115462399658250346826473936791592985");
    EXPECT_TRUE(-big == BigInt("59115462399658250346826473936791592985"));
    // rvalue
    EXPECT_TRUE(-BigInt(0) == BigInt(0));
    EXPECT_TRUE(-BigInt(1) == BigInt(-1));
    EXPECT_TRUE(-BigInt(-1) == BigInt(1));
    EXPECT_TRUE(-BigInt("22751580910313383077913392923626820855") == BigInt("-22751580910313383077913392923626820855"));
    EXPECT_TRUE(-BigInt("-105428805275251174898503613186821834567") == BigInt("105428805275251174898503613186821834567"));
}

TEST(BigIntMulOps, SmallMulWorks)
{
    // mul assign
    BigInt lhs("208990938212438221051793465806953292805");
    lhs *= BigInt("89952526011043286477560912970076518794");
    EXPECT_TRUE(lhs == BigInt("18799262805626689404449386367241101497430886906210838163644160483629767477170"));
    // infix mul
    EXPECT_TRUE(BigInt("141568561781325403383098860354483467178") * BigInt("144612517754537690773054331955552575159") == BigInt("20472586154086285871813986416465847334330107130741145019054056571228754631302"));
    // pos neg
    EXPECT_TRUE(BigInt("27987456898229571791307061459983687774") * BigInt("-79917376323200901187916857972372126531") == BigInt("-2236684125265177714630657832899744537034941241068228543600458359375925731994"));
    // neg pos
    EXPECT_TRUE(BigInt("-186332210822491902673006135314571891853") * BigInt("322185194915529554991354199371830326337") == BigInt("-60033479662886099281002804769458869023025281878420268332665887446148461632461"));
    // neg neg
    EXPECT_TRUE(BigInt("-177342835956564176824871247178147603765") * BigInt("-120211946819933641307023269780709715381") == BigInt("21318727564906708415585634544484983740391719260809448703869122923180314009465"));
}

TEST(BigIntMulOps, Toom2Works)
{
    // Toom2Thresh = 300
    // sqrt(300) = 17.3
    // both sides are atleast 18 chunks
    BigInt lhs("25640123065427642548344711590384251898826241460181366358793022654917738445866564540952775130313756181887341624571815036854261193373186619389303129980822891615189075640241117");
    BigInt rhs("74940078188013597919108837660849887528350939241926725355601328888062071444691868746097782019954938390494455106880803832937777711680340046321033078733786675225934247482237828");
    EXPECT_TRUE(lhs * rhs == BigInt("1921472827273438424548852584361783403567178888710996449299821058149020202636923455472580837850409145874915220041722814324857663316909482546690250660153651921842857840884772948084707865284067735443667777869437312543719627326444739445832951453560768558273816067222267841105202414899133188378375671099003197748352056038221914308086313911484658373876"));
}

TEST(BigIntMulOps, Toom3Works)
{
    // Toom3Thresh = 800
    // sqrt(800) = 28.3
    // both sides are atleast 29 chunks
    BigInt lhs("640792934840877150985848870834759490241032294844051747802826585408903174895912116812308064874178000179445106729825388868339220758916400082999984191183697293784053835054029283835258267450891917044387857975370551918759437527119859407679752858262766714069202325660887452237045613921");
    BigInt rhs("2060880887232588527806486391700283637642085215827849533266671511806165575983724266104444361425154547494942210673267478618915370375279701603046354771202271239884889997898961986730732705230447211682620889775150081943281151112235666184203654894604467144780777121372500056332472489114");
    EXPECT_TRUE(lhs * rhs == BigInt("1320597912087241192125186523156496735550332935170071918848932736237575572598797542841226103849032101385515587775036970001564072091547546651769777833427627166926062707015657924294113577964009575556096620073188002152384472540869998418972300460744301622288073037171028401902569622914319448446924720015636006121191636974044440962263688584343559217715637652449506109881149292471049016776197197600922565314550312168301486434545137263899147857584624588816262183063698450601358366690032464927564300221374858567999256068113625360124229435865604220587222397871119355994"));
}

TEST(BigIntDivModOps, Works)
{
    // pos pos
    EXPECT_TRUE(BigInt("139387726524269028282214103213234099108") / BigInt(1518398810535480380) == BigInt("91799154186054968203"));
    EXPECT_TRUE(BigInt("141525490151079884065945864516820719931") % BigInt(7235830146665277635) == BigInt(441877497937542706));
    // pos neg
    EXPECT_TRUE(BigInt("225560602272341244603355522105284968376") / BigInt(-749262884178019311) == BigInt("-301043341443227977082"));
    EXPECT_TRUE(BigInt("161270493232803252737118979756816467191") % BigInt(-1009271480112003349) == BigInt(935459410198268386));
    // neg pos
    EXPECT_TRUE(BigInt("-64841685909559032866131051408367280170") / BigInt(6182749243719021809) == BigInt("-10487516694200544604"));
    EXPECT_TRUE(BigInt("-228491571861745029240647230450300994693") % BigInt(8654852012993924760) == BigInt(-3173173044762874733));
    // neg neg
    EXPECT_TRUE(BigInt("-314782659620462297259167800440843451933") / BigInt(-4010301222104162184) == BigInt("78493520109020439256"));
    EXPECT_TRUE(BigInt("-128010304219658244330832188821155117404") % BigInt(-4642734543508590940) == BigInt(-4532001667705171864));
    // small large
    EXPECT_TRUE(BigInt(3024112648356590705) / BigInt("41815209219475073694443040228568777389") == BigInt(0));
    EXPECT_TRUE(BigInt(5385988462955792682) % BigInt("224364014742806355453492366495645548108") == BigInt(5385988462955792682));
    // these inputs hit divmodAddBack internally
    EXPECT_TRUE(BigInt("19122993964741265205004922666831139784902809462") % BigInt(1000000000000000000) == BigInt(831139784902809462));
    // assign
    BigInt big1("190588910553216662708443483383766888162");
    big1 /= BigInt(1959902019257340062);
    EXPECT_TRUE(big1 == BigInt("97244101327797989091"));
    BigInt big2("27432475326302439864505357526466838465");
    big2 %= BigInt(4618571638942349066);
    EXPECT_TRUE(big2 == BigInt(1049279397132927697));
}

TEST(BigIntBitwiseOps, AssignWorks)
{
    BigInt big1, big2;
    // small large
    big1 = BigInt(3612913089679992449);
    big1 &= BigInt("160140883010512738883913455915332544368");
    EXPECT_TRUE(big1 == BigInt("3468617581694035456"));
    big1 = BigInt(4761746248047252716);
    big1 |= BigInt("301488843578595278042804271169874222334");
    EXPECT_TRUE(big1 == BigInt("301488843578595278047560354069749947646"));
    big1 = BigInt(2770559850873482291);
    big1 ^= BigInt("61721888489530569772363106232534873974");
    EXPECT_TRUE(big1 == BigInt("61721888489530569770233185636948204357"));
    // large small
    big1 = BigInt("113789642721887372206649239689960493107");
    big1 &= BigInt(8605746940649191107);
    EXPECT_TRUE(big1 == BigInt("1306255132656406531"));
    big1 = BigInt("78686554405440943747024611894231524961");
    big1 |= BigInt(4004684342021864203);
    EXPECT_TRUE(big1 == BigInt("78686554405440943747493395411557646187"));
    big1 = BigInt("240307248876206098908728029606593010510");
    big1 ^= BigInt(7974194666391867028);
    EXPECT_TRUE(big1 == BigInt("240307248876206098916701088440831940058"));
    // const ref rhs
    big1 = BigInt("267432860109520355724006778154930945309");
    big2 = BigInt(9046368477566300142);
    big1 &= big2;
    EXPECT_TRUE(big1 == BigInt(6125775102937148684));
    big1 = BigInt(5771006729540459356);
    big2 = BigInt("189170453402146400413966533371091326803");
    big1 |= big2;
    EXPECT_TRUE(big1 == BigInt("189170453402146400419735789639222288223"));
    big1 = BigInt("318301275946496104038527178046309019016");
    big2 = BigInt(6463543353517598465);
    big1 ^= big2;
    EXPECT_TRUE(big1 == BigInt("318301275946496104044900648453788060297"));
    // negative
    big1 = BigInt(-9058765637860077823);
    big2 = BigInt("45925541915078723910544038346590700407");
    big1 &= big2;
    EXPECT_TRUE(big1 == BigInt("45925541915078723902458947807891997441"));
    big1 = BigInt("271369340990767080797628202056290129183");
    big2 = BigInt(-1203640520437074273);
    big1 |= big2;
    EXPECT_TRUE(big1 == BigInt("-49557329825237089"));
    big1 = BigInt("319084512759343260452923647487450940525");
    big2 = BigInt(-8217380184030156303);
    big1 ^= big2;
    EXPECT_TRUE(big1 == BigInt("-319084512759343260454223379715079639652"));
    // same obj
    auto big1copy = big1;
    big1 &= big1;
    EXPECT_TRUE(big1 == big1copy);
    big1 |= big1;
    EXPECT_TRUE(big1 == big1copy);
    big1 ^= big1;
    EXPECT_TRUE(big1 == BigInt(0));
}

TEST(BigIntBitwiseOps, NotWorks)
{
    // lvalue
    BigInt big1("96558561699736801337130713178561296466");
    EXPECT_TRUE(~big1 == BigInt("-96558561699736801337130713178561296467"));
    // rvalue
    EXPECT_TRUE(~BigInt("11718796510786186563890241642872635206") == BigInt("-11718796510786186563890241642872635207"));
}

TEST(BigIntBitwiseOps, InfixWorks)
{
    BigInt big1, big2;
    // big small
    big1 = BigInt("191126185292397871665516031412926666469");
    big2 = BigInt(7892608220221960031);
    EXPECT_TRUE((big1 & big2) == BigInt(975064881730438725));
    big1 = BigInt("160876994951805824039256891181773583606");
    big2 = BigInt(7596879757124223546);
    EXPECT_TRUE((big1 | big2) == BigInt("160876994951805824043888994306968516350"));
    big1 = BigInt("208281935733804057731030556787656584499");
    big2 = BigInt(8748192332672489034);
    EXPECT_TRUE((big1 ^ big2) == BigInt("208281935733804057728083005328711891833"));
    // small big
    big1 = BigInt(2071856380403681848);
    big2 = BigInt("270430656011422732612884506582045283376");
    EXPECT_TRUE((big1 & big2) == BigInt("1441349820946350128"));
    big1 = BigInt(7584226799424580119);
    big2 = BigInt("230737599275228594453438068195090955041");
    EXPECT_TRUE((big1 | big2) == BigInt("230737599275228594458139848265034627895"));
    big1 = BigInt(1295992673990703885);
    big2 = BigInt("119965308135476222780520014007284464893");
    EXPECT_TRUE((big1 ^ big2) == BigInt("119965308135476222779230794532694231024"));
    // lvalue rvalue
    big1 = BigInt("213828757536377136850296524263334442175");
    EXPECT_TRUE((big1 & BigInt("23648857629585114097286414607532657928")) == BigInt("1041272568174222540247168340670874632"));
    big1 = BigInt("221774438131532196249346656772191313125");
    EXPECT_TRUE((big1 | BigInt("337630575727225188867314990291363775398")) == BigInt("338753166557528025687368709600779919335"));
    big1 = BigInt("5118089215060220015903195811229729572");
    EXPECT_TRUE((big1 ^ BigInt("44588790418530735413864048646259203437")) == BigInt("45623584203940772509545004557984587337"));
    // rvalue lvalue
    big2 = BigInt("181402405101841228427402302731255097724");
    EXPECT_TRUE((BigInt("162970170370986740459921405505968792935") & big2) == BigInt("10762353751686111737774083125362893156"));
    big2 = BigInt("141309322538131749588924935561171461954");
    EXPECT_TRUE((BigInt("86373208316818965776186994128334035980") | big2) == BigInt("142227394756546908888032581891322249038"));
    big2 = BigInt("284343153370929015486857755400929969672");
    EXPECT_TRUE((BigInt("195665678831101786044227879856990516777") ^ big2) == BigInt("94176118194772566616015122243661099041"));
    // move big small
    EXPECT_TRUE((BigInt(4691689377200409398) & BigInt("193502109992166369958685700142021597452")) == BigInt(4683764090936559876));
    EXPECT_TRUE((BigInt(6369262035065754487) | BigInt("281509671713320409733043467097493276171")) == BigInt("281509671713320409733044603997097154431"));
    EXPECT_TRUE((BigInt(8978358284073963507) ^ BigInt("245538361872659366903941117245209734878")) == BigInt("245538361872659366910604324053551309101"));
    // move small big
    EXPECT_TRUE((BigInt("123831536722648608262164964265179931084") & BigInt(3768088794448444385)) == BigInt(3458818163515498944));
    EXPECT_TRUE((BigInt("186569104876024722335821623545800408235") | BigInt(2889598130147918482)) == BigInt("186569104876024722335823921662710759099"));
    EXPECT_TRUE((BigInt("293870858589525163351437814436088209513") ^ BigInt(3466997980255505477)) == BigInt("293870858589525163354893553391169907756"));
}

TEST(BigIntShiftOps, AssignWorks)
{
    BigInt big;
    // non aligned
    big = BigInt("125803290773658062339890520828827770459");
    big <<= 104;
    EXPECT_TRUE(big == BigInt("2551593872958625866873397225340077103401021815497918573930061804601344"));
    big = BigInt("-38204402160635878733382265034550550660");
    big <<= 115;
    EXPECT_TRUE(big == BigInt("-1586948778566966833891264092422049639451836888446546102200823721104506880"));
    big = BigInt("215815998173247886970891187659071285146");
    big >>= 67;
    EXPECT_TRUE(big == BigInt("1462426087978518846"));
    big = BigInt("-150645521659204619314346832388778782381");
    big >>= 94;
    EXPECT_TRUE(big == BigInt("-7605655206"));
    // aligned
    big = BigInt("238035109463796576382640746321586432394");
    big <<= 64;
    EXPECT_TRUE(big == BigInt("4390972744836093900048943721563591249621162409550837448704"));
    big = BigInt("-168611094341864636150559753734933275946");
    big <<= 96;
    EXPECT_TRUE(big == BigInt("-13358747184225207517649168019451556784201674835055364648366407417856"));
    big = BigInt("72596757293014322456540821391903228261");
    big >>= 32;
    EXPECT_TRUE(big == BigInt("16902749727716278856746112320"));
    big = BigInt("-51580473263649253377770300427782692842");
    big >>= 64;
    EXPECT_TRUE(big == BigInt("-2796183058513949882"));
    // zero
    big = BigInt("172545143330868692448549030763751941438");
    big <<= 0;
    EXPECT_TRUE(big == BigInt("172545143330868692448549030763751941438"));
    big = BigInt("-253844158409388167287356114229851308133");
    big <<= 0;
    EXPECT_TRUE(big == BigInt("-253844158409388167287356114229851308133"));
    big = BigInt("138886312953704067892565580779943123198");
    big >>= 0;
    EXPECT_TRUE(big == BigInt("138886312953704067892565580779943123198"));
    big = BigInt("-138886312953704067892565580779943123198");
    big >>= 0;
    EXPECT_TRUE(big == BigInt("-138886312953704067892565580779943123198"));
    // crazy shift right
    big = BigInt("66087997715172092365235992228821524600");
    big >>= 278;
    EXPECT_TRUE(big == BigInt(0));
    big = BigInt("-190196577250641720851391608026620855800");
    big >>= 276;
    EXPECT_TRUE(big == BigInt(-1));
}

TEST(BigIntShiftOps, InfixWorks)
{
    BigInt big;
    // lvalue
    big = BigInt("44187682044133800476922581792310327958");
    EXPECT_TRUE(big << 121 == BigInt("117471008083810172285874021321890010512333736506097072945492684863612911616"));
    big = BigInt("159113560141393377296943481585594629792");
    EXPECT_TRUE(big >> 85 == BigInt("4112989129476"));
    // rvalue
    EXPECT_TRUE(BigInt("184316900689456028030833447729495365932") << 112 == BigInt("957028064424738338967489209078179590617936590630788564456908675688169472"));
    EXPECT_TRUE(BigInt("272044912937764710902171231292648911299") >> 89 == BigInt("439512261183"));
}

TEST(BigIntCmpOps, BoolWorks)
{
    EXPECT_FALSE(BigInt(0));
    EXPECT_TRUE(BigInt(-1));
    EXPECT_TRUE(BigInt("246030614478810129216754222428951589152"));
    EXPECT_TRUE(BigInt("-25454769754104775365858529352502498581"));
}

TEST(BigIntCmpOps, EqWorks)
{
    EXPECT_TRUE(BigInt(0) == BigInt(0));
    EXPECT_TRUE(BigInt(-1) == BigInt(-1));
    EXPECT_TRUE(BigInt(0) != BigInt(-1));
    EXPECT_FALSE(BigInt(0) != BigInt(0));
    EXPECT_FALSE(BigInt(-1) != BigInt(-1));
    EXPECT_TRUE(BigInt("316511035238649226698408876593026200799") == BigInt("316511035238649226698408876593026200799"));
    EXPECT_TRUE(BigInt("-307421348530949880863779343924690873178") == BigInt("-307421348530949880863779343924690873178"));
    EXPECT_TRUE(BigInt("272402216571513199471668763834485744228") != BigInt("-4214057921117509118756261330583481930"));
    EXPECT_TRUE(BigInt("314738724175592610150159384984455173561") != BigInt("219392969720502347260298926425630171413"));
    EXPECT_FALSE(BigInt("12348472322468412239054173354756888233") != BigInt("12348472322468412239054173354756888233"));
    EXPECT_FALSE(BigInt("-72830791278637893593029353953389212455") != BigInt("-72830791278637893593029353953389212455"));
    // same obj
    BigInt big("167701367002829114418272188120382652435");
    EXPECT_TRUE(big == big);
    EXPECT_FALSE(big != big);
}

TEST(BigIntCmpOps, CmpWorks)
{
    EXPECT_TRUE(BigInt("85386632987013786074729799414633561493") < BigInt("243635199290603149437090728068546504393"));
    EXPECT_TRUE(BigInt("23521270296437513665807922173038930628") > BigInt("16993114754913685601882599845235925998"));
    EXPECT_TRUE(BigInt("6018452072676614741940535319493372348") <= BigInt("150511130366899033912466131628869158842"));
    EXPECT_TRUE(BigInt("257217134591605415049743527006798067852") >= BigInt("104091558923412983050054657353477127396"));
    // same val
    EXPECT_FALSE(BigInt("306485467936439915755047455696471428618") < BigInt("306485467936439915755047455696471428618"));
    EXPECT_FALSE(BigInt("14067689637752303813271824282692342574") > BigInt("14067689637752303813271824282692342574"));
    EXPECT_TRUE(BigInt("298258294337849000215008489112578897366") <= BigInt("298258294337849000215008489112578897366"));
    EXPECT_TRUE(BigInt("246226096339941343558184574781346757870") >= BigInt("246226096339941343558184574781346757870"));
    // same obj
    BigInt big("272700903047097367072406234543406722147");
    EXPECT_FALSE(big < big);
    EXPECT_FALSE(big > big);
    EXPECT_TRUE(big <= big);
    EXPECT_TRUE(big >= big);
    // rvalue overloads
    BigInt lhs("289363133104820537166196644380981858349");
    BigInt rhs("209374968857833432629319355180392576255");
    EXPECT_FALSE(lhs < rhs);
    EXPECT_FALSE(lhs < BigInt("93151719828215136083651060912541684809"));
    EXPECT_TRUE(BigInt("98696310550729056733039619239469236303") < rhs);
    EXPECT_TRUE(BigInt("88807723886191649185632380861854384327") < BigInt("138670621298285178317743514700496725835"));
}

TEST(BigIntToString, Works)
{
    // rvalue
    EXPECT_TRUE(BigInt(0).toString() == "0");
    EXPECT_TRUE(BigInt(-1).toString() == "-1");
    EXPECT_TRUE(BigInt(42).toString() == "42");
    EXPECT_TRUE(BigInt("39319932322470870728537033831382841147").toString() == "39319932322470870728537033831382841147");
    EXPECT_TRUE(BigInt("88340730844059161829142520199020189664").toString() == "88340730844059161829142520199020189664");
    EXPECT_TRUE(BigInt("4778131972598404387131229886230279785").toString() == "4778131972598404387131229886230279785");
    EXPECT_TRUE(BigInt("-237056874147820773527468850533351191438").toString() == "-237056874147820773527468850533351191438");
    EXPECT_TRUE(BigInt("-310541075083408736158864660750446673005").toString() == "-310541075083408736158864660750446673005");
    EXPECT_TRUE(BigInt("-7898936895695507665301422626411256655").toString() == "-7898936895695507665301422626411256655");
    EXPECT_TRUE(BigInt("-320561019721024089963971178618185566968").toString() == "-320561019721024089963971178618185566968");
    // lvalue
    BigInt big;
    big = BigInt("33323094306873600895659607286095226850");
    EXPECT_TRUE(big.toString() == "33323094306873600895659607286095226850");
    big = BigInt("-167068738971371546148623968665648245066");
    EXPECT_TRUE(big.toString() == "-167068738971371546148623968665648245066");
}

TEST(BigIntToHex, Works)
{
    // rvalue
    EXPECT_TRUE(BigInt(0).toHex() == "0x0");
    EXPECT_TRUE(BigInt(-1).toHex() == "-0x1");
    EXPECT_TRUE(BigInt("116243201062464284689812801549962602295").toHex() == "0x5773a04d0e05f6e59bbeefdac80c6737");
    EXPECT_TRUE(BigInt("-200380197899849194930046467999277295298").toHex() == "-0x96bfd284dbb62aad29ecf18fe5e0a6c2");
    EXPECT_TRUE(BigInt("241293769526998316206544976813421387230").toHex() == "0xb5877d57408b8ccfc2acab0854c65dde");
    // lvalue
    BigInt big;
    big = BigInt("45333991657062742294074377008549958986");
    EXPECT_TRUE(big.toHex() == "0x221b025b224b015ad049d8d06cab954a");
    big = BigInt("-180125769058078106111204992277916812536");
    EXPECT_TRUE(big.toHex() == "-0x8782f613b97e3f2167dce937a38a04f8");
}
